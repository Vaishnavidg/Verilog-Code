Half Adder
1) Data Flow Code:
module HA_143_151(
    input a,
    input b,
    output sum,
    output carry
    );
	 assign sum = a^b;
	 assign carry = a & b;


endmodule
2) Gate Level Code
module ha_143_151_GL(
    input a,
    input b,
    output sum,
    output carry
    );
	 xor u1(sum,a,b);
	 and u2(carry,a,b);


endmodule
3)Behavioral Code
module HA_143_151_behav(
    input a,
    input b,
    output sum,
    output carry
    );
	 reg sum,carry;
	 always @(a or b)
	 begin
	 if (a==0 && b==0)
	 begin
		sum = 0;
		carry = 0;
		end
	 else if (a==0 && b==1)
	 begin
		sum = 1;
		carry = 0;
		end
	else if (a==1 && b==0)
	 begin
		sum = 1;
		carry = 0;
		end
	else
	 begin
		sum = 0;
		carry = 1;
		end
	 end


endmodule

Test Bench Code:
module ha_tb_bevaor;

	// Inputs
	reg a;
	reg b;

	// Outputs
	wire sum;
	wire carry;

	// Instantiate the Unit Under Test (UUT)
	HA_143_151_behav uut (
		.a(a), 
		.b(b), 
		.sum(sum), 
		.carry(carry)
	);

	initial begin
		// Initialize Inputs
		a = 0;
		b = 0;
		#100; 		// Wait 100 ns for global reset to finish
        
		// Add stimulus here
		
		a = 0;
		b = 1;
		#100;
		
		a = 1;
		b = 0;
		#100;
		
		a = 1;
		b = 1;
		#100;
	end
      
endmodule

.ucf:

# PlanAhead Generated IO constraints 

NET "a" IOSTANDARD = LVCMOS33;
NET "b" IOSTANDARD = LVCMOS33;
NET "carry" IOSTANDARD = LVCMOS33;
NET "sum" IOSTANDARD = LVCMOS33;

# PlanAhead Generated physical constraints 

NET "a" LOC = U8;
NET "b" LOC = U9;
NET "carry" LOC = V9;
NET "sum" LOC = T8;
